rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Boards: Allow authenticated users to read and create boards.
    // You might want to restrict update/delete to specific roles (e.g., facilitator) later.
    match /boards/{boardId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      // Only the facilitator can delete the board
      allow update: if request.auth != null;
      allow delete: if request.auth != null && resource.data.facilitatorId == request.auth.uid;
    }

    // Cards:
    // - Allow any authenticated user to read cards (necessary for board display).
    // - Allow authenticated users to create cards, ensuring they set themselves as the author.
    // - Allow any authenticated user to update cards (covers voting, reordering).
    //   You could restrict content updates to the author specifically if required.
    // - Allow users to delete only their own cards OR allow the board facilitator to delete any card.
    match /cards/{cardId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null
                    && request.resource.data.authorId == request.auth.uid; // Ensure author is self
      allow update: if request.auth != null; // Allows voting, reordering by anyone authenticated
      allow delete: if request.auth != null && 
                     (resource.data.authorId == request.auth.uid || 
                      isFacilitatorOfCardBoard(cardId, request.auth.uid)); // Only author OR board facilitator can delete
    }

    // Function to check if the user is the facilitator of the board a card belongs to
    function isFacilitatorOfCardBoard(cardId, userId) {
      let card = get(/databases/$(database)/documents/cards/$(cardId)).data;
      let boardId = card.boardId;
      let board = get(/databases/$(database)/documents/boards/$(boardId)).data;
      return board.facilitatorId == userId;
    }

    // Users collection - this is critical for participant functionality
    match /users/{userId} {
      allow read: if request.auth != null; // Anyone authenticated can see participants
      allow create, update: if request.auth != null && request.auth.uid == userId; // Users can only manage their own data
    }
    
    // Test collection - used for testing write permissions
    match /test/{docId} {
      allow read, write: if request.auth != null;
    }

    // Add rules for other collections like 'actions' if you use them.
    // Example:
    // match /actions/{actionId} {
    //   allow read, write: if request.auth != null; // Adjust permissions as needed
    // }
  }
}