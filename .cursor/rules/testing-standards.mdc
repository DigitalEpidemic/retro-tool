---
description: 
globs: 
alwaysApply: false
---
# Testing Standards

## Test Syntax

- Always use `it()` instead of `test()` for test cases
- Always use descriptive test descriptions that explain what the test is checking
- Prefer using `it.each` for parameterized testing when multiple test cases follow the same pattern
- Format table-driven tests as readable arrays of test cases with descriptive explanations
- Keep tests focused and avoid testing multiple things in one test case

## Test Structure

- Tests should be organized in a describe-it pattern
- Group related tests under descriptive describe blocks
- Use nested describe blocks for complex components with multiple behaviors
- Setup and teardown should be handled with beforeEach/afterEach hooks

## Testing Best Practices

- Test components in isolation where possible
- Mock dependencies that are outside the scope of the test
- Write tests that validate functionality, not implementation details
- Ensure tests are deterministic and don't depend on external state
- Use appropriate assertions to validate the expected behavior
- Use userEvent where possible instead of fireEvent for better simulation
- NEVER use the --silent flag when running tests, as it hides important warnings and errors that need to be fixed
- Always wrap state-changing operations (including component rendering and event firing) in act() to prevent React act() warnings

## Running Tests

- Run tests with `npm test -- <pattern>` to focus on specific tests
- When debugging test failures or warnings, always run without the --silent flag
- Fix all warnings that appear during tests, especially React act() warnings
- Use correct Vitest filtering patterns:
  - Use `npm test -- -t "ComponentName"` to run all tests for a specific component
  - DO NOT use nested descriptions in the -t pattern like `npm test -- -t "Column Sorting > handles toggling"` as this doesn't work with Vitest
  - To run a specific test, use the full test name: `npm test -- -t "renders correctly"`
  - For file path filtering, use `npm test -- src/components/__tests__/Column.test.tsx`
  - To combine filters, use multiple flags: `npm test -- src/components/__tests__/Column.test.tsx -t "renders"`